/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column mixin.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column-width function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * An alias for the column-gutter function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 *  Alias for edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Uncenter an element.
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Unstack an element.
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Apply a clearfix to an element.
 */
/* line 5, ../../../../../../../Library/Ruby/Gems/2.0.0/gems/compass-core-1.0.1/stylesheets/compass/reset/_utilities.scss */
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font: inherit;
  font-size: 100%;
  vertical-align: baseline;
}

/* line 22, ../../../../../../../Library/Ruby/Gems/2.0.0/gems/compass-core-1.0.1/stylesheets/compass/reset/_utilities.scss */
html {
  line-height: 1;
}

/* line 24, ../../../../../../../Library/Ruby/Gems/2.0.0/gems/compass-core-1.0.1/stylesheets/compass/reset/_utilities.scss */
ol, ul {
  list-style: none;
}

/* line 26, ../../../../../../../Library/Ruby/Gems/2.0.0/gems/compass-core-1.0.1/stylesheets/compass/reset/_utilities.scss */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

/* line 28, ../../../../../../../Library/Ruby/Gems/2.0.0/gems/compass-core-1.0.1/stylesheets/compass/reset/_utilities.scss */
caption, th, td {
  text-align: left;
  font-weight: normal;
  vertical-align: middle;
}

/* line 30, ../../../../../../../Library/Ruby/Gems/2.0.0/gems/compass-core-1.0.1/stylesheets/compass/reset/_utilities.scss */
q, blockquote {
  quotes: none;
}
/* line 103, ../../../../../../../Library/Ruby/Gems/2.0.0/gems/compass-core-1.0.1/stylesheets/compass/reset/_utilities.scss */
q:before, q:after, blockquote:before, blockquote:after {
  content: "";
  content: none;
}

/* line 32, ../../../../../../../Library/Ruby/Gems/2.0.0/gems/compass-core-1.0.1/stylesheets/compass/reset/_utilities.scss */
a img {
  border: none;
}

/* line 116, ../../../../../../../Library/Ruby/Gems/2.0.0/gems/compass-core-1.0.1/stylesheets/compass/reset/_utilities.scss */
article, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section, summary {
  display: block;
}

/* line 10, ../../sass/_init.sass */
img {
  max-width: 100%;
  height: auto;
}

/* line 14, ../../sass/_init.sass */
html, body {
  font-family: "Georgia", serif;
  height: 100%;
  color: #585757;
}

/* line 19, ../../sass/_init.sass */
h1, h2, h3, h4, h5, h6 {
  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
  font-weight: 500;
}

/* line 21, ../../sass/_init.sass */
h1 {
  font-size: 3.5em;
}

/* line 23, ../../sass/_init.sass */
h2 {
  font-size: 3em;
}

/* line 25, ../../sass/_init.sass */
h3 {
  font-size: 2.5em;
}

/* line 27, ../../sass/_init.sass */
h4 {
  font-size: 2em;
}

/* line 29, ../../sass/_init.sass */
h5 {
  font-size: 1.5em;
}

/* line 31, ../../sass/_init.sass */
p {
  line-height: 20px;
}

/* line 34, ../../sass/_init.sass */
.full-container {
  *zoom: 1;
  width: auto;
  max-width: 100%;
  float: none;
  display: block;
  margin-right: auto;
  margin-left: auto;
  padding-left: 0;
  padding-right: 0;
}
/* line 344, ../../sass/jeet/_grid.scss */
.full-container:before, .full-container:after {
  content: '';
  display: table;
}
/* line 349, ../../sass/jeet/_grid.scss */
.full-container:after {
  clear: both;
}

/* line 36, ../../sass/_init.sass */
.container {
  *zoom: 1;
  float: left;
  clear: none;
  text-align: inherit;
  width: 100%;
  margin-left: 0%;
  margin-right: 3%;
  margin-top: 15px;
}
/* line 344, ../../sass/jeet/_grid.scss */
.container:before, .container:after {
  content: '';
  display: table;
}
/* line 349, ../../sass/jeet/_grid.scss */
.container:after {
  clear: both;
}
/* line 58, ../../sass/jeet/_grid.scss */
.container:last-child {
  margin-right: 0%;
}

/* line 39, ../../sass/_init.sass */
.main-container {
  *zoom: 1;
  width: auto;
  max-width: 900px;
  float: none;
  display: block;
  margin-right: auto;
  margin-left: auto;
  padding-left: 0;
  padding-right: 0;
}
/* line 344, ../../sass/jeet/_grid.scss */
.main-container:before, .main-container:after {
  content: '';
  display: table;
}
/* line 349, ../../sass/jeet/_grid.scss */
.main-container:after {
  clear: both;
}

/* line 41, ../../sass/_init.sass */
.half-container {
  *zoom: 1;
  float: left;
  clear: none;
  text-align: inherit;
  width: 48.5%;
  margin-left: 0%;
  margin-right: 3%;
  margin-top: 10px;
}
/* line 344, ../../sass/jeet/_grid.scss */
.half-container:before, .half-container:after {
  content: '';
  display: table;
}
/* line 349, ../../sass/jeet/_grid.scss */
.half-container:after {
  clear: both;
}
/* line 50, ../../sass/jeet/_grid.scss */
.half-container:nth-child(2n) {
  margin-right: 0%;
  float: right;
}
/* line 54, ../../sass/jeet/_grid.scss */
.half-container:nth-child(2n + 1) {
  clear: both;
}

/* line 44, ../../sass/_init.sass */
.third-container {
  *zoom: 1;
  float: left;
  clear: none;
  text-align: inherit;
  width: 31.33333%;
  margin-left: 0%;
  margin-right: 3%;
  margin-top: 10px;
}
/* line 344, ../../sass/jeet/_grid.scss */
.third-container:before, .third-container:after {
  content: '';
  display: table;
}
/* line 349, ../../sass/jeet/_grid.scss */
.third-container:after {
  clear: both;
}
/* line 50, ../../sass/jeet/_grid.scss */
.third-container:nth-child(3n) {
  margin-right: 0%;
  float: right;
}
/* line 54, ../../sass/jeet/_grid.scss */
.third-container:nth-child(3n + 1) {
  clear: both;
}

/* line 48, ../../sass/_init.sass */
.inline {
  display: inline;
  margin-left: 10px;
}

/* line 51, ../../sass/_init.sass */
.center {
  text-align: center;
}

@media screen and (max-width: 500px) {
  /* line 56, ../../sass/_init.sass */
  .half-container, .third-container {
    display: block;
    clear: both;
    float: none;
    width: 100%;
    margin-left: auto;
    margin-right: auto;
  }
  /* line 265, ../../sass/jeet/_grid.scss */
  .half-container:first-child, .third-container:first-child {
    margin-left: auto;
  }
  /* line 269, ../../sass/jeet/_grid.scss */
  .half-container:last-child, .third-container:last-child {
    margin-right: auto;
  }
}
